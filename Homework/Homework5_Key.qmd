---
title: "Homework 5"
always_allow_html: yes
format: docx
editor_options: 
  chunk_output_type: console
---

```{r, warning = FALSE, message = FALSE}
#for nicer table output
library(knitr)
library(tidyverse)
```

I'm going to give instructions for completing this homework in R. If you want to use python, that's fine but you'll have to set everything up!

For starters, you'll need to install `keras3` and `tensorflow`. You can find basic instructions on the [`keras3` website](https://keras3.posit.co/articles/getting_started.html).

Basically, you need to run

- `install.packages("keras3")` (this takes a good while)
- `keras3::install_keras(backend = "tensorflow")` (again this takes a while!)

Some notes about my installation troubleshooting (I'm on Windows) after running their two installation lines:

- I had to manually set the location for my python installation within RStudio. (Tools --> Global Options --> python tab --> select installation from there)
- Similarly, I set my project option to the same installation (Tools --> Project Options --> python tab --> select installation from there)
- From this [stackoverflow post](https://stackoverflow.com/questions/54791126/no-module-named-rpytools), I had to copy the `rpytools` folder from my R library folder to the last folder noted when running this code:

```{r, eval = FALSE}
library(reticulate)
sys <- import("sys", convert = TRUE)
sys$path
```

- I tried to rerun the `keras3::install_keras(backend = "tensorflow")` code to get `keras` to work appropriately but it still failed


# Conceptual Problems



# Implementation Problems 

We'll fit two basic models here!

1. Run the code they have on the [getting started article](https://keras3.posit.co/articles/getting_started.html) to fit your first deep learning model!

I reproduce the code here! 

```{r}
library(keras3)
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
```

```{r}
# reshape
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
```

```{r}
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
```

```{r}
model <- keras_model_sequential(input_shape = c(784))
model |>
  layer_dense(units = 256, activation = 'relu') |>
  layer_dropout(rate = 0.4) |>
  layer_dense(units = 128, activation = 'relu') |>
  layer_dropout(rate = 0.3) |>
  layer_dense(units = 10, activation = 'softmax')
```

```{r}
summary(model)
```

```{r}
plot(model)
```

```{r}
model |> compile(
  loss = 'categorical_crossentropy',
  optimizer = optimizer_rmsprop(),
  metrics = c('accuracy')
)
```


```{r}
history <- model |> fit(
  x_train, y_train,
  epochs = 30, batch_size = 128,
  validation_split = 0.2
)
```

```{r}
plot(history)
```


```{r}
model |> evaluate(x_test, y_test)
```

```{r}
probs <- model |> predict(x_test)
```

```{r}
max.col(probs) - 1L
```







